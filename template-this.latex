\documentclass[a4paper]{article}

\usepackage{color}
\usepackage{xcolor}
\usepackage{fullpage}
\usepackage[colorlinks, allcolors=blue]{hyperref}
\usepackage{listings}
\usepackage{parskip}
\usepackage{url}
\usepackage{courier}
\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{xspace}
% \usepackage{libertine}%% Only as example for the romans/sans fonts
\usepackage[scaled=0.85]{beramono}
\usepackage{changepage}
\usepackage{nameref}
\usepackage[nottoc]{tocbibind}

\usepackage[bordercolor=white,backgroundcolor=gray!30,linecolor=black,colorinlistoftodos]{todonotes}
\newcommand{\takeaway}[1]{\todo[color=yellow,inline]{#1}}

\usepackage[style=iso]{datetime2}

% Solarized colour scheme for listings
\definecolor{solarized@base03}{HTML}{002B36}
\definecolor{solarized@base02}{HTML}{073642}
\definecolor{solarized@base01}{HTML}{586e75}
\definecolor{solarized@base00}{HTML}{657b83}
\definecolor{solarized@base0}{HTML}{839496}
\definecolor{solarized@base1}{HTML}{93a1a1}
\definecolor{solarized@base2}{HTML}{EEE8D5}
\definecolor{solarized@base3}{HTML}{FDF6E3}
\definecolor{solarized@yellow}{HTML}{B58900}
\definecolor{solarized@orange}{HTML}{CB4B16}
\definecolor{solarized@red}{HTML}{DC322F}
\definecolor{solarized@magenta}{HTML}{D33682}
\definecolor{solarized@violet}{HTML}{6C71C4}
\definecolor{solarized@blue}{HTML}{268BD2}
\definecolor{solarized@cyan}{HTML}{2AA198}
\definecolor{solarized@green}{HTML}{859900}

\lstset{
  basicstyle=\footnotesize\ttfamily,
  rangeprefix=//\ ,
  includerangemarker=false,
}

% Define C++ syntax highlighting colour scheme
\lstdefinelanguage{cpp}{
  language=C++,
  basicstyle=\footnotesize\ttfamily,
  numbers=left,
  numberstyle=\footnotesize,
  tabsize=2,
  breaklines=true,
  escapeinside={@}{@},
  numberstyle=\tiny\color{solarized@base01},
  keywordstyle=\color{solarized@green},
  stringstyle=\color{solarized@cyan}\ttfamily,
  identifierstyle=\color{solarized@blue},
  commentstyle=\color{solarized@base01},
  emphstyle=\color{solarized@red},
  frame=single,
  rulecolor=\color{solarized@base2},
  rulesepcolor=\color{solarized@base2},
  showstringspaces=false,
}

\lstdefinelanguage{diff}{
  morecomment=[f][\color{blue}]{@@},           % group identifier
  morecomment=[f][\color{red}]{-},             % deleted lines
  morecomment=[f][\color{green!50!black}]{+},  % added lines
  morecomment=[f][\color{magenta}]{---},       % diff header lines
  morecomment=[f][\color{magenta}]{+++},
}

\lstdefinelanguage{plus}{
  basicstyle=\footnotesize\ttfamily\color{green!50!black},
  emph={see,below,TypeSwitch,unspecified},
  emphstyle=\itshape
}

\lstdefinelanguage{signature}{
  basicstyle=\ttfamily\color{green!50!black},
  emph={see,below,TypeSwitch,unspecified},
  emphstyle=\itshape
}

\newcommand{\desc}[1]{\textit{#1}}
\newcommand{\requires}{\desc{Requires}}
\newcommand{\effects}{\desc{Effects}}
\newcommand{\precondition}{\desc{Precondition}}
\newcommand{\postcondition}{\desc{Postcondition}}
\newcommand{\throws}{\desc{Throws}}
\newcommand{\returns}{\desc{Returns}}
\newcommand{\remarks}{\desc{Remarks}}
\newcommand{\exceptionsafety}{\desc{Exception Safety}}
\newcommand{\fullref}[1]{\ref{#1} \nameref{#1}}

\def\code#1{\texttt{#1}}
\newcommand\mypound{\protect\scalebox{0.8}{\raisebox{0.4ex}{\#}}}
\newcommand{\CC}{C\nolinebreak\hspace{-.05em}\raisebox{0.4ex}{\resizebox{!}{0.6\height}{\bf++}}}
\newcommand{\cplusplus}{\protect\CC}
\newcommand{\this}{\code{this}\xspace}
\newcommand{\self}{\code{self}\xspace}
\newcommand{\cvref}{\emph{cv-ref qualifiers}\xspace}

\date{}
\title{%
  Template \this\\% Andrew suggested dropping it.
  \large (Divining the value category of \code{*this})}

\newcommand{\emailaddressa}{ben at elbeno dot com}
\newcommand{\emaila}{\href{mailto:\emailaddressa}{\emailaddressa}}
\newcommand{\emailaddressb}{gasper dot azman at gmail dot com}
\newcommand{\emailb}{\href{mailto:\emailaddressb}{\emailaddressb}}

\begin{document}

\maketitle\vspace{-2cm}

\begin{flushright}
  \begin{tabular}{ll}
  Document \mypound{}: &DxxxxR0\\
  Date:       &\date{\today}\\
  Audience:   &Evolution Working Group\\
  Reply-to:   &\author{Ben Deane}, \emailaddressa\\
              &\author{Gašper Ažman}, \emailaddressb\\
  \end{tabular}
\end{flushright}

{\hypersetup{linkcolor=black}
  \tableofcontents
}

\section{Introduction}

We propose a new mechanism for specifying the value category of an instance of a
class, which is visible from inside a member function of that class -- in other
words, a way to tell from within a member function whether one's \this points to
an rvalue or an lvalue, and whether it is \code{const} or \code{volatile}.

\section{Motivation}

The existing mechanism for this is to add reference, rvalue-reference, const or
volatile qualifier (\cvref) suffixes to a member function. It suffers from the
following problems:

\subsection*{It is verbose.}

A common task in writing a class is providing a \emph{getter function} to access
a contained member. Authors that care about performance want to provide getter
functions that take advantage of move semantics in cases where the class
instance is an rvalue, and so end up writing several of these functions, which
differ only in the \cvref.

\subsection*{There is no way to write a reference qualifier for a lambda expression.}

When writing a lambda expression, it is impossible to know whether it is safe to
move from captured-by-copy members of the closure object.

This impacts the performance of lambda expressions. One scenario where this
becomes important is using lambda expressions as parts of a chain of
asynchronous continuations that carry a value through a computation.

An example. If one does not know *which* one of the two asynchronous carriers is
registered on the other side of a signal/slot mechanism, for instance, it is
impossible to optimally ferry values over the mechanism with a lambda.
\lstinputlisting[language=cpp,%
                 linerange=START_CPP17-END_CPP17]{%
                 examples.cpp}

\subsection*{There is no way to refer to a lambda expression from within itself.}

The rationale in \cite{p0839} (\emph{Recursive lambdas} by Richard Smith) is valid
and we'd like to transclude it here.

This paper provides an alternative to the proposed solution in that paper.

\section{Design Considerations}

In addition to solving the existing problems, desirable properties of a solution are:

\begin{itemize}

\item It should work the same way for member functions and lambda expressions.

\item It should work like existing practice as much as possible, while adding as
  little extra syntax as possible.

\item It should avoid adding extraneous syntax to function declarations. In a
  world where every function is fast becoming tagged with attributes,
  \code{constexpr}, \code{noexcept} specifications, and (this proposal
  notwithstanding) reference qualifiers, readable, noise-free function
  declarations are to be prized.

\item The design should provide more uniformity to the language. With the
  desires for uniform call syntax, the way we define functions and member functions
  should be converging as much as possible.

\end{itemize}


\section{Proposed Solution}

We propose the ability to add an optional first parameter to any member function
of a class \code{T}, taking the form \code{T [const] [volatile] [\&|\&\&] this
<identifier>}.

To facilitate use in generic lambda expressions, this may also be formulated as
\code{auto [const] [volatile] [\&|\&\&] this <identifier>}.

In all cases, the value category of a so-defined \code{identifier}inside the
member function is exactly what the existing parameter rules would already
imply. In other words, the \cvref that stand after the function signature now
explicitly apply to the \code{identifier} so designated with \this.

With this, the above "value carrier" example becomes:
\lstinputlisting[language=cpp,%
                 linerange=START_TEMPLATE_THIS-END_TEMPLATE_THIS]{%
                 examples.cpp}

Getter functions get the greates benefit. Here is an example of slightly more
common code:
\begin{lstlisting}[language=cpp]
struct Person {
  std::string name;

  template <typename Self>
  decltype(auto) GetName(Self&& this self) {
    return std::forward<Self>(self).name;
  }
};
\end{lstlisting}

The template above will likely result in the instantiation of the member functions:

\begin{lstlisting}[language=cpp]
  std::string const& GetName() const& ;
  std::string& GetName() &;
  std::string&& GetName() &&;
\end{lstlisting}

These are all member functions we currently write by hand, and whose correct
semantics must be manually maintained.

The benefit gets slightly more obvious once we are not simply returning a
member. For instance, :vs


\section{What Does \this in a Parameter List Mean?}

Effectively, \this denotes a parameter, that otherwise behaves completely
normally, to be the parameter that \code{*this} refers to. The name of this
parameter follows the general rules for parameter naming, but shall be referred
to as \self for the remainder of this paper.

The entries of this table should be read as if they are inside a class \code{X}:

\begin{lstlisting}[language=cpp]
class X { /* entry */ };
\end{lstlisting}
In other words, \code{X} is \emph{not} a template parameter.

\begin{tabular}{ | l | l | l | }
  \hline
  \textbf{written as} & \textbf{\cplusplus{}17 signature} & \textbf{comments}\\
  \hline
  \code{void f(X this self)}                    & currently not available & [value]\\
  \code{void f(X\& this self)}                  & \code{void f() \&} &\\
  \code{void f(X\&\& this self)}                & \code{void f() \&\&} &\\
  \code{void f(X const this self)}              & currently not available & [value]\\
  \code{void f(X const\& this self)}            & \code{void f() const\&} &\\
  \code{void f(X const\&\& this self)}          & \code{void f() const\&\&} &\\
  \code{void f(X volatile this self)}           & currently not available & [value]\\
  \code{void f(X volatile\& this self)}         & \code{void f() volatile\&} &\\
  \code{void f(X volatile\&\& this self)}       & \code{void f() volatile\&\&} &\\
  \code{void f(X const volatile this self)}     & currently not available & [value]\\
  \code{void f(X const volatile\& this self)}   & \code{void f() const volatile\&} &\\
  \code{void f(X const volatile\&\& this self)} & \code{void f() const volatile\&\&} &\\
  \hline
\end{tabular}
\newpage
\emph{Notes:}

\begin{itemize}

\item \emph{[value]}: whether passing by value should be allowed is debatable,
  but seems desirable for completeness and parity with \code{inline friend}
  functions.

\item The interpretation of \this in the member function body is always the same
  -- it points to the same object \self references.

\item \self is \emph{not} a reserved identifier - instead, just a
  conventional naming. Any valid identifier is valid instead of \self (as
  is, for parity with the rest of the language, no name, since parameter names
  are optional).

\item \self, where it is visible, behaves exactly as a parameter declared
  without \this. The only difference is in the call syntax. This means that type
  deduction, use in decltype for trailing return types etc., and use within the
  function body are completely unsurprising.

\item As now, only one definition for a given signature may be present -- e.g.
  one may define at most one of \code{void f()}, \code{void f()\&}, or
  \code{void f(X\& this)}. The first two are already exclusive of each other, we
  merely add a third way to define the very same method.
\end{itemize}

\subsection*{How does a templated \this-designated parameter work?}

It uses existing deduction rules for template parameters, which will deduce the
type of the \this-designated parameter to something in the above table.

\subsection*{What does \this mean in the body of a member function?}

The behavior of \this is unchanged - it behaves as now. The behavior of
\self is the same as a paramter declared without the \this designator. The
only difference is in how \self is bound (to \code{*this}, and not to an
explicitly provided parameter).

\subsection*{Does this change overload resolution at all?}

No. Non-templates still get priority over templates, \emph{et cetera}.

\subsection*{How do the explicit \this-designated parameter and the current,
trailing \cvref interact?}

Other than the pass-by-value member functions, which currently do not have
syntax to represent them, the explicit \this signatures are aliases for those
with trailing \cvref. They stand for the very same functions.

This means that rewriting the function signature in a different style should not
change the ABI of your class, and you should also be able to implement a
member function that is forward-declared with one syntax using the other.

\subsection*{\this in a variadic parameter pack}

Given the fact that there is no obvious meaning to the expression
\begin{lstlisting}[language=cpp]
struct X {
  template <typename... Ts>
  void f(Ts... this selves);
};
\end{lstlisting}
such a program is ill-formed.

\subsection*{Constructors and Destructors}

No change to current rules. Currently, one cannot have different cv-ref versions
of either, so you cannot designate any parameter with \this.

\subsection*{What about pass-by-value member functions?}

We think they are a logical extension of the mechanism, and would go a long way
towards making member functions as powerful as \code{inline friend} functions,
with the only difference being the call syntax.

One implication of this is that the \this parameter would be move-constructed in
cases where the object is an rvalue, allowing you to treat chained builder
member functions that return a new object uniformly without having to resort to
templates.  
\emph{Example:}

\begin{lstlisting}[language=cpp]
class string_builder {
  std::string s;

  operator std::string (string_builder this self) {
    return std::move(s);
  }
  string_builder operator*(string_builder this self, int n) {
    assert(n > 0);

    s.reserve(s.size() * n);
    auto const size = s.size();
    for (auto i = 0; i < n; ++i) {
      s.append(s, 0, size);
    }
    return self;
  }
  string_builder bop(string_builder this self) {
    s.append("bop");
    return self;
  }
};

// this is optimally efficient as far as allocations go
std::string const x = (string_builder{{"asdf"}} * 5).bop().bop();
\end{lstlisting}

Of course, implementing this example with templated \this member functions would
have been slightly more efficient due to also saving on move constructions, but
the by-value \this usage makes for simpler code.

\subsubsection*{Writing the function pointer types for such functions}

Currently, we write member function pointers like so:
\lstinputlisting[language=cpp,%
                 linerange=START_MEMBER_REF_POINTER-END_MEMBER_REF_POINTER]{%
                 examples.cpp}
%
All the member functions that take references already have a function pointer
syntax - they are just alternate ways of writing functions we can already write.

The only one that does not have such a syntax is the pass-by-value method, all
others have pre-existing signatures that do just fine.

We are asking for suggestions for syntax for these function pointers. We
give our first pass here:

\lstinputlisting[language=cpp,%
                 linerange=START_MEMBER_VAL_POINTER-END_MEMBER_VAL_POINTER]{%
                 examples.cpp}
%

Such an approach unifies, to a degree, the member functions and the rest of the
function type spaces, since it communicates not only that the first parameter is
special, but also its type and calling convention.

\subsection*{\this as a reference}

This paper turns \this into a reference on an opt-in basis, which is in
line with existing guidelines that never-null pointers should be references if
at all possible; in this case, it is possible.

We believe there would be no confusion, since in all cases, the value category
of \this is stated plainly in the parameter list, which is on the very same
screen.


One can always obtain the address of the object by taking the address of \this.

\subsection*{\code{virtual} and \this as value}

Virtual member functions are always dispatched based on the type of the object the
dot -- or arrow, in case of pointer -- operator is being used on. Once the member
function is located, the parameter \this is constructed with the appropriate
move or copy constructor and passed as the \this parameter, which might incur
slicing.

Effectively, there is no change from current behavior -- only
a slight addition of a new overload that behaves the way a user would expect.

\subsection*{\code{virtual} and templated member functions}

This paper does not propose a change from the current behavior. \code{virtual}
templates are still disallowed.

\subsection*{Can \code{static} member functions have a \this parameter?}

No. Static member functions currently do not have an implicit \this parameter,
and therefore have no reason to have an explicit one.

\subsection*{Constraints on the type of \this in member function templates}

In all respects, \this behaves like a normal template parameter. Let us revisit
the \code{Person} example:
\begin{lstlisting}[language=cpp]
struct Person {
  std::string name;

  template <typename U>
  decltype(auto) GetName(U&& this) {
    return std::forward<U>(this).name;
  }
};
\end{lstlisting}

In regular usage as a member function, the only instantiations of \code{GetName}
would be the ones where \code{U} is deduced to various flavors of \code{Person}.

However, let us consider a case where a \code{Person} has a conversion to
\code{PersonWrapper}:
\begin{lstlisting}[language=cpp]
struct PersonWrapper {
  std::string name;
  template <typename Person>
  PersonWrapper(Person&& p) : name(std::forward<Person>(p).name) {}
};
\end{lstlisting}

In this case, one could make the argument that the following is valid code:
\begin{lstlisting}[language=cpp]
Person{"Arthur Dent"}.GetName<PersonWrapper>(); // returns "Arthur Dent"s
\end{lstlisting}
The above would instantiate \code{GetName} with a \code{PersonWrapper\&\&}
parameter, which would be automatically constructed from \code{Person} due to
the implicit conversion.

This is already true for \code{friend} functions (though \code{inline friend}
functions are not accessible without ADL), illustrated by the fact that
following code compiles:
\lstinputlisting[language=cpp,%
                 linerange=START_PERSONWRAPPER_17-END_PERSONWRAPPER_17]{%
                 examples.cpp}
%

All this would do is unify the rules for free function templates and member
function templates.

\subsection*{Teachability Implications}

Using \code{auto\&\& this self} follows existing patterns for dealing with
forwarding references.

Explicitly naming the object as the \this-designated first parameter fits with
many programmers' mental model of the \this pointer being the first parameter to
member functions "under the hood" and is comparable to usage in other languages,
e.g. Python and Rust.

This also makes the definition of ``\code{const} member function'' more obvious,
meaning it can more easily be taught to students.

It also works as a more obvious way to teach how \code{std::bind} and
\code{std::function} work with a member function pointer by making the pointer
explicit.

\subsection*{ABI implications for \code{std::function} and related}

If references and pointers do not have the same representation for member
functions, this effectively says "for the purposes of the \this-designated first
parameter, they do."

This matters because code written in the ``\this is a pointer'' syntax with the
'\code{this->}' notation needs to be assembly-identical to code written with the
'\code{self.}' notation; the two are just different ways to implement a function
with the same signature.

\section{Implications for Lambda Expressions}

Generic lambdas, should they take an \code{auto\&\& this} parameter, work
according to existing rewriting rules. The \code{auto\&\& this} is turned into a
"forwarding reference" and deduced as if it were inside a
\code{template <typename T>
auto operator()(T\&\& this self) \{ ...\ \}}.

\subsection*{Do we allow \this \self in lambdas that decay to a function
pointer?}

If the lambda would otherwise decay to a function pointer, \code{\&self} shall
have the value of that function pointer.

\subsection*{Does this allow recursion in lambdas?}

Yes. You're allowed to call \code{self(...)}.

\subsection*{Expressions allowed for \self in lambdas}

\begin{lstlisting}[language=cpp]
  this(...);      // call with appropriate signature
  decltype(this); // evaluates to the type of the lambda with the appropriate
                  // cv-ref qualifiers
  &this;          // the address of either the closure object or function pointer
  std::move(this) // you're allowed to move yourself into an algorithm...
  /* ... and all other things you're allowed to do with the lambda itself. */
\end{lstlisting}

Within lambda expressions, the \this parameter still does not allow one to refer
to the members of the closure object, which has no defined storage or layout,
nor do its members have names. Instead it allows one to deduce the value
category of the lambda and access its members -- including various call operators
-- in the way appropriate for the value category.

\subsection*{Interplays with capturing \code{[this]} and \code{[*this]}}

\this just designates the parameter that is bound to the reference to the
function object. It does not, in any way, change the meaning of \this.

If other language features play with what \this means, they are completely
orthogonal and do not have interplays with this proposal. However, it should be
obvious that develpers have a great potential for introducing hard-to-read code
if they are at all changing the meaning of \this, especially in conjunction with
this proposal.

\subsubsection*{Note: Lambdas, \self, and the members of the closure object}
It is not possible to refer to members of the closure using \self.  The closure
has no defined layout, its members do not have names, and the members referenced
may not even be inserted into the closure, if one exists at all. Members of the
closure may be used as they are currently - they are simply in scope.

All operations \emph{on the lambda itself}, such as calling, moving, etc. are
available - \self is equivalent to any other variable that references the
lambda.

\subsection*{Is \code{auto\&\& this self} allowed in member functions as well as
lambdas?}

Yes. \code{auto\&\& param\_name} has a well-defined meaning that is unified
across the language. There is absolutely no reason to make it less so.

\section{Impact on the Standard}

TBD: A bunch of stuff in section 8.1.5 [expr.prim.lambda].

TBD: A bunch of stuff in that \this can appear as the first member function
parameter.

\section{Further Directions}

In this section, we explore the options that this feature can potentially lead
to. Each section should be considered its own mini-proposal, since each one goes
further into unexplored territory. However, when assessing a feature, it is
important to know where it may lead, thus we include this section.

\subsection*{Unification with \code{inline friend} functions}

This proposal makes \this far less special. In fact, it almost unifies
\code{inline friend} functions and class member functions, with the only
differences being:

\begin{itemize}
  \item the calling syntax (member function vs free function)
  \item member functions can be virtual
\end{itemize}

Basically, if the first parameter is called \this, one can parse and instantiate
the declaration with exactly the same rules as an \code{inline friend}, except
with a calling convention for member functions.

\subsection*{Opt-in uniform call syntax}

The interaction of a \this parameter with \code{friend} functions raises the
possibility of opt-in uniform call syntax. Consider:

\begin{lstlisting}[language=cpp]
class Foo
{
  friend auto ufcs(Foo this, int x)
  {
    // this function can be called two ways
  }
};
\end{lstlisting}

A reasonable interpretation for defining a member function with \code{friend}
\emph{and} a \this parameter is that it may be called either as a regular
member function, or as a friend function. That is, either syntax could work.

\begin{lstlisting}[language=cpp]
  Foo f;
  f.ufcs(42);  // member function call syntax
  ufcs(f, 42); // friend (free) function call syntax
\end{lstlisting}

Previously, there has been considerable discussion whether UFCS prefers the
member or the free function. In this case, the member and the free function are
the very same function, so that question is rendered irrelevant.

\subsection*{Free functions}

Given the above, we might choose to extend uniform call syntax to free functions
by allowing \this to appear in their signatures as well. Such non-friend
functions would become callable with both syntaxes.

\begin{lstlisting}[language=cpp]
std::pair<int, int>& add(std::pair<int, int>& this,
                         std::pair<int, int> const& other) {
  // only public members are visible, since not a friend
  first += other.first;
  second += other.second;
  return this;
}

auto x = pair{1, 2};
x.add({3, 4});
// x.first == 4, x.second == 6
\end{lstlisting}

There are legitimate reasons to disallow adding \this to free functions. In
\cplusplus{}17, member function definitions are in a specific place; allowing
this use case erodes member function discoverability.

However, we are already in the same situation with free functions. In feedback,
we have heard arguments both for and against allowing this. It is a question for
the committee.

Providing both a member and a free function with the same signature makes the
program ill-formed in order to avoid the issue of preference.

\subsection*{Why stop at the first parameter?}

Now that we have uniform call syntax, we might reasonably ask ourselves what
\this would mean if included as another -- \emph{not the first} -- parameter.

We would argue the following for functions that include \this as a second or
subsequent parameter:

\begin{itemize}
\item When called with free function invocation syntax, they behave as they
  would if the parameter were named something else, except that public members
  are in scope within the function.
\item When called with member function invocation syntax, the \this
  parameter is dropped from the signature regardless of its location.
\end{itemize}

For some predicates, the reverse positioning of parameters makes perfect sense,
as in the following example:

\begin{lstlisting}[language=cpp]
template <typename T>
bool has_element(T const& element, std::list<T> const& this) {
  return std::find(cbegin(), cend(), element) != cend();
}
std::list<int> my_list = {1, 2, 3, 4, 5, 6, 8};
my_list.has_element(6); // true
has_element(7, my_list); // false
\end{lstlisting}

\subsubsection*{How \this as any parameter would play with operator overloading}

Operators are one of the parts of the language that already have UFCS. They
undergo fewer changes than the rest of the language.

Consider an \code{operator+} that is defined as follows:

\begin{lstlisting}[language=cpp]
template <typename T, typename U>
std::pair<T, U> operator+(std::pair<T, U> x, std::pair<T, U> this) {
  return {x.first + first, x.second + second};
}
\end{lstlisting}

From the caller's point of view, nothing at all changes, not even the ABI. The
only thing that changes is how the function is written.

If called as \code{pair\{1, 2\}.operator+(pair\{3, 4\})}, the order of
parameters is reversed according to the code above. The call is actually
\code{operator+(pair\{3, 4\}, pair\{1, 2\})}.

We do not advocate subverting caller expectations, but we see no reason to
prohibit this construction specifically for operators.

\subsubsection*{Do we allow \this-position swapping for member functions?}

We allow it for \code{inline friend} functions only. The practice has no meaning
for functions that do not opt in to UFCS.

\section{FAQ}

\subsection*{Do you really have to redefine what \this means in functions?}

An alternative proposal would be to use \this as an adjective, like so:

\begin{lstlisting}[language=cpp]
struct Person {
  std::string name;
  decltype(auto) GetName(auto&& this person) {
    // this is a pointer, as normal
    // person has the correct cv-ref qualifiers
    std::forward<decltype(person)>(person).name;
  }
};
\end{lstlisting}

In this case
\begin{enumerate}
  \item \this does not change the current meaning in any context.
%  \item Mutually recursive lambdas have a way of easily referring to one another.
  \item It is not as terse, as you need another way to call the function
    parameter.

    This could be resolved by making the name optional, in which case \code{T}
    still resolves to the same thing (names are not necessary), but
    \code{auto\&\& this /* no name */} does not help one to divine the value
    type of whatever \this points to.
  \item \this in a parameter list \emph{only} designates the parameter that UFCS
    works on, and does no further work.
\end{enumerate}

It has the potential to unify much more of the langauge. If this is a direction
the committe would rather proceed, the paper will be re-drafted in this form.

\section{Acknowledgments}

Thanks to the following for their help and guidance:

\begin{itemize}
  \item Louis Dionne
  \item Marshall Clow
  \item Andrew Bennieston
  \item Tristan Brindle
  \item Graham Haynes
  \item Eva Conti
  \item Richard Smith
\end{itemize}

\begin{thebibliography}{9}

\bibitem[P0839]{p0839}
  Richard Smith,
\emph{Recursive lambdas}\newline
\url{http://wg21.link/p0839r0}

\bibitem[P0018R3]{p0018r3}
  H. Carter Edwards,
  Daveed Vandevoorde,
  Christian Trott,
  Hal Finkel,
  Jim Reus,
  Robin Maffeo, 
  Ben Sander,
  \emph{Capturing \code{*this} by value}\newline
  \url{http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0018r3.html}

\bibitem[P0637R0]{p0637r0}
  Thomas Köppe,
  \emph{Capture \code{*this} With Initializer}\newline
  \url{http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0637r0.html}

\end{thebibliography}


\appendix

\section{\code{forward\_like}}

We propose a new library facility, \code{forward\_like}, that acts as
\code{std::forward<T>(t).member} does for members, with the syntax
\code{forward\_like<T>(t.member)}. This is done because in the case of lambdas,
the closure members are not actually addressable using \code{this.member}.

The proposed semantics are essentially the same as \code{std::forward}.
If \code{From} and \code{To} are the same type, \code{forward\_like} and
\code{forward} act identically.

Proposed definition:
\lstinputlisting[language=cpp,%
                 linerange=START_FWD_LIKE_DEF-END_FWD_LIKE_DEF]{%
                 forward_like.cpp}
%
To do this, we require another facility in the standard library, \code{like}:
\lstinputlisting[language=cpp,%
                 linerange=START_LIKE_DEF-END_LIKE_DEF]{%
                 forward_like.cpp}
It merely copies the \cvref from \code{From} to \code{To}.


The entire listing of the code with all the tests is available at\\
\url{https://github.com/atomgalaxy/isocpp-template-this/blob/master/forward_like.cpp}.

\end{document}

% specify lookup rules in the x.f(y) b
% dietmar: how about solving it with a cv-ref template kind, instead of T&& -
% qualifier templates
%
% Objection from everyone:
% - 'this' needs to be a pointer - it's a great way to have it die in EWG
% - 'this name' is more acceptable, but still quite a few people hate it
%
