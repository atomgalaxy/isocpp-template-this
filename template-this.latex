\documentclass[a4paper]{article}

\usepackage{color}
\usepackage{xcolor}
\usepackage{fullpage}
\usepackage[colorlinks, allcolors=blue]{hyperref}
\usepackage{listings}
\usepackage{parskip}
\usepackage{url}
\usepackage{courier}
\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
% \usepackage{libertine}%% Only as example for the romans/sans fonts
\usepackage[scaled=0.85]{beramono}
\usepackage{changepage}
\usepackage{nameref}
\usepackage[nottoc]{tocbibind}

\usepackage[bordercolor=white,backgroundcolor=gray!30,linecolor=black,colorinlistoftodos]{todonotes}
\newcommand{\takeaway}[1]{\todo[color=yellow,inline]{#1}}

\usepackage[style=iso]{datetime2}

% Solarized colour scheme for listings
\definecolor{solarized@base03}{HTML}{002B36}
\definecolor{solarized@base02}{HTML}{073642}
\definecolor{solarized@base01}{HTML}{586e75}
\definecolor{solarized@base00}{HTML}{657b83}
\definecolor{solarized@base0}{HTML}{839496}
\definecolor{solarized@base1}{HTML}{93a1a1}
\definecolor{solarized@base2}{HTML}{EEE8D5}
\definecolor{solarized@base3}{HTML}{FDF6E3}
\definecolor{solarized@yellow}{HTML}{B58900}
\definecolor{solarized@orange}{HTML}{CB4B16}
\definecolor{solarized@red}{HTML}{DC322F}
\definecolor{solarized@magenta}{HTML}{D33682}
\definecolor{solarized@violet}{HTML}{6C71C4}
\definecolor{solarized@blue}{HTML}{268BD2}
\definecolor{solarized@cyan}{HTML}{2AA198}
\definecolor{solarized@green}{HTML}{859900}

\lstset{
  basicstyle=\footnotesize\ttfamily,
  rangeprefix=//\ ,
  includerangemarker=false,
}

% Define C++ syntax highlighting colour scheme
\lstdefinelanguage{cpp}{
  language=C++,
  basicstyle=\footnotesize\ttfamily,
  numbers=left,
  numberstyle=\footnotesize,
  tabsize=2,
  breaklines=true,
  escapeinside={@}{@},
  numberstyle=\tiny\color{solarized@base01},
  keywordstyle=\color{solarized@green},
  stringstyle=\color{solarized@cyan}\ttfamily,
  identifierstyle=\color{solarized@blue},
  commentstyle=\color{solarized@base01},
  emphstyle=\color{solarized@red},
  frame=single,
  rulecolor=\color{solarized@base2},
  rulesepcolor=\color{solarized@base2},
  showstringspaces=false,
}

\lstdefinelanguage{diff}{
  morecomment=[f][\color{blue}]{@@},           % group identifier
  morecomment=[f][\color{red}]{-},             % deleted lines
  morecomment=[f][\color{green!50!black}]{+},  % added lines
  morecomment=[f][\color{magenta}]{---},       % diff header lines
  morecomment=[f][\color{magenta}]{+++},
}

\lstdefinelanguage{plus}{
  basicstyle=\footnotesize\ttfamily\color{green!50!black},
  emph={see,below,TypeSwitch,unspecified},
  emphstyle=\itshape
}

\lstdefinelanguage{signature}{
  basicstyle=\ttfamily\color{green!50!black},
  emph={see,below,TypeSwitch,unspecified},
  emphstyle=\itshape
}

\newcommand{\desc}[1]{\textit{#1}}
\newcommand{\requires}{\desc{Requires}}
\newcommand{\effects}{\desc{Effects}}
\newcommand{\precondition}{\desc{Precondition}}
\newcommand{\postcondition}{\desc{Postcondition}}
\newcommand{\throws}{\desc{Throws}}
\newcommand{\returns}{\desc{Returns}}
\newcommand{\remarks}{\desc{Remarks}}
\newcommand{\exceptionsafety}{\desc{Exception Safety}}
\newcommand{\fullref}[1]{\ref{#1} \nameref{#1}}

\def\code#1{\texttt{#1}}
\newcommand\mypound{\protect\scalebox{0.8}{\raisebox{0.4ex}{\#}}}
\newcommand{\CC}{C\nolinebreak\hspace{-.05em}\raisebox{0.4ex}{\resizebox{!}{0.6\height}{\bf++}}}
\newcommand{\cplusplus}{\protect\CC}

\date{}
\title{%
  Template \code{this}!\\
  \large (Divining the value category of \code{*this})}

\newcommand{\emailaddressa}{ben at elbeno dot com}
\newcommand{\emaila}{\href{mailto:\emailaddressa}{\emailaddressa}}
\newcommand{\emailaddressb}{gasper dot azman at gmail dot com}
\newcommand{\emailb}{\href{mailto:\emailaddressb}{\emailaddressb}}

\begin{document}

\maketitle\vspace{-2cm}

\begin{flushright}
  \begin{tabular}{ll}
  Document \mypound{}: &DxxxxR0\\
  Date:       &\date{\today}\\
  Audience:   &Evolution Working Group\\
  Reply-to:   &\author{Ben Deane}, \emailaddressa\\
              &\author{Gašper Ažman}, \emailaddressb\\
  \end{tabular}
\end{flushright}

{\hypersetup{linkcolor=black}
  \tableofcontents
}

\section{Introduction}

We propose a new mechanism for specifying the value category of an instance of a
class which is visible from inside a member function of that class. In other
words, a way to tell from within a member function whether one's \code{this}
points to an rvalue or an lvalue, and whether it is \code{const} or
\code{volatile}.

\section{Motivation}

The existing mechanism for this (adding a reference, rvalue-reference, const or
volatile qualifier (\emph{cv-ref qualifiers}) suffixes to a member function)
suffers from problems.

\subsection*{It is verbose.}

A common task in writing a class is providing a "getter function" to access a
contained member. Authors that care about performance want to provide getter
functions that take advantage of move semantics in the case where the class
instance is an rvalue, and so end up writing several of these functions, which
only differ in the cv-ref qualifiers.

\subsection*{There is no way to write a reference qualifier for a lambda expression.}

When writing a lambda expression, it is impossible to know whether it is safe to
move from captured-by-copy members of the closure object. This impacts the
performance of lambda expressions. One scenario where this is important arises
when using lambda expressions as parts of a chain of asynchronous continuations
that carry a value through a computation.

\subsection*{There is no way to refer to a lambda expression from within itself.}

The rationale in \cite{p0839} (\emph{Recursive lambdas} by Richard Smith) is valid
and we'd like to transclude it here.

This paper provides an alternative to the proposed solution in that paper.

TBD: Ask Richard if he'd like to contribute.

\section{Design Considerations}

In addition to solving the existing problems, desirable properties of a solution are:

\begin{itemize}

\item It should work the same way for member functions and lambda expressions.

\item It should work like existing practice as much as possible, while adding as
  little extra syntax as possible.

\item It should avoid adding extraneous syntax to function declarations. In a
  world where every function is fast becoming tagged with attributes,
  \code{constexpr}, \code{noexcept} specifications, and (this proposal
  notwithstanding) reference qualifiers, readable, noise-free function
  declarations are to be prized.

\end{itemize}

TBD: more here.

\section{Proposed Solution}

We propose the ability to add an optional first parameter to any member function
of a class \code{T}, taking the form \code{T [const] [volatile] [\&|\&\&] this}.

To facilitate use in generic lambda expressions, this may also be formulated as
\code{auto [const] [volatile] [\&|\&\&] this}.

In all cases, the value category of \code{this} inside the member function is
exactly what the existing parameter rules would already imply. In other words,
the \emph{cv-ref qualifiers} that stand after the function signature now
explicitly apply to the \code{this} parameter.

\begin{lstlisting}[language=cpp]
  // Within a class

  struct Person {
    std::string name;

    // Getter:
    template <typename U>
    decltype(auto) GetName(U&& this) {
      // U can only deduce to Person (const, volatile, &, &&)
      // because of visibility
      return std::forward<T>(this).name;
    }

    // This template will likely instantiate the following functions:
    // const std::string& GetName() const &;
    // std::string& GetName() &;
    // std::string&& GetName() &&;
  };

  void foo()
  {
    string s = "Hello, world!";

    // Here, the closure object is an rvalue:
    // the captured s will be correctly moved
    bar([s] (auto&& this) {
      return std::forward_like<decltype(this)>(s);  // see appendix A
    }
  }
\end{lstlisting}

\section{What does \code{this} in a parameter list mean?}

The meaning of the different ways to pass \code{this} is the same as current
general parameter handling.

The entries of this table should be read as if they are inside a class \code{T}:

\begin{lstlisting}[language=cpp]
class T { /* entry */ };
\end{lstlisting}
In other words, \code{T} is \emph{not} a template parameter.

\begin{tabular}{ | l | l | l | }
  \hline
  \textbf{written as} & \textbf{\cplusplus{}17 signature} & \textbf{comments}\\
  \hline
  \code{void f(T this)} & currently not available & [value]\\
  \code{void f(T\& this)} & \code{void f() \&} &\\
  \code{void f(T\&\& this)} & \code{void f() \&\&} &\\
  \code{void f(T const this)} & currently not available & [value]\\
  \code{void f(T const\& this)} & \code{void f() const\&} &\\
  \code{void f(T const\&\& this)} & \code{void f() const\&\&} &\\
  \code{void f(T volatile this)} & currently not available & [value]\\
  \code{void f(T volatile\& this)} & \code{void f() volatile\&} &\\
  \code{void f(T volatile\&\& this)} & \code{void f() volatile\&\&} &\\
  \code{void f(T const volatile this)} & currently not available & [value]\\
  \code{void f(T const volatile\& this)} & \code{void f() const volatile\&} &\\
  \code{void f(T const volatile\&\& this)} & \code{void f() const volatile\&\&} &\\
  \hline
\end{tabular}

\emph{Notes:}

\begin{itemize}

\item \emph{[value]}: whether passing by value should be allowed is debatable,
  but seems desired for completeness and parity with inline friend functions.

\item The interpretation of \code{this} in the method body differs, but only one
  definition for a given signature may be present, eg. one may define at most
  one of \code{void f()\&}, or \code{void f(T\& this)} or \code{void f()}, the
  first and last already being exclusive of one another.

\end{itemize}

\subsection*{How does templated \code{this} work?}

Using existing deduction rules for template parameters, which will deduce the
type of \code{this} to something in the above table.

\subsection*{What does \code{this} mean in the body of a member function?}

It behaves exactly as a regular parameter declared in the same way.

\subsection*{Constructors}

No exceptions to the above rules. If a particular constructor signature is not
allowed by the language, it continues to be disallowed. We can already access
already-initialized members in initialization lists, which means \code{this} is
already available, even though it hasn't been completely constructed yet.

\subsection*{What about pass-by-value methods?}

We think they are a logical extension of the mechanism, and would go a long way
towards making methods as powerful as inline friend functions, with the only
difference being the call syntax.

One implication of this is that the \code{this} parameter would be move-constructed in
the case where the object is an rvalue, allowing you to treat chained builder
methods that return a new object uniformly without having to resort to
templates.

\emph{Example:}

\begin{lstlisting}[language=cpp]
  class string_builder {
    std::string s;

    operator std::string (string_builder this) {
      return std::move(s);
    }
    string_builder operator*(string_builder this, int n) {
      assert(n > 0);

      s.reserve(s.size() * n);
      auto const size = s.size();
      for (auto i = 0; i < n; ++i) {
        s.append(s, 0, size);
      }
      return this;
    }
    string_builder bop(string_builder this) {
      s.append("bop");
      return this;
    }
  };

  // this is optimally efficient as far as allocations go
  std::string const x = (string_builder{{"asdf"}} * 5).bop();
\end{lstlisting}

Of course, implementing this example with templated \code{this} methods would
have been more efficient due to just having fewer objects, but we got rid of all
references in the program!

\subsection*{\code{this} as a reference}

This paper turns \code{this} into a reference on an opt-in basis, which is in
line with the existing guidance that never-null pointers should be references if
at all possible, and in this case, it is possible.

We believe there would be no confusion, as in all cases, the value category of
\code{this} is stated plainly in the parameter list, which is on the very same
screen.

Teaching also becomes easier, as the meaning of what a ``const method'' is becomes
more obvious to students.

One can always obtain the address of the object by taking the address of the
\code{this}.

\subsection*{Unification with \code{inline friend} functions}

This proposal also makes \code{this} far less special. In fact, it completely
unifies \code{inline friend} functions and class methods, with the differences
being:

\begin{itemize}
  \item the calling syntax (method vs free function)
  \item methods can be virtual
\end{itemize}

Basically, if the first parameter is called \code{this}, one can parse and
instantiate the declaration with exactly the same rules as an \code{inline
  friend}, except with a calling convention for methods.

\subsection*{Opt-in uniform call syntax}

The interaction of a \code{this} parameter with \code{friend} functions raises
the possibility of opt-in uniform call syntax. Consider:

\begin{lstlisting}[language=cpp]
  class Foo
  {
    friend auto ufcs(Foo this, int x)
    {
      // this function can be called two ways
    }
  };
\end{lstlisting}

A reasonable interpretation for defining a member function with \code{friend}
\emph{and} a \code{this} parameter is that it may be called as either a regular
member function, or as a friend function. That is, either syntax could work.

\begin{lstlisting}[language=cpp]
  Foo f;
  f.ufcs(42);  // member function call syntax
  ufcs(f, 42); // friend (free) function call syntax
\end{lstlisting}

\subsection*{\code{virtual}}

We are not entirely sure how \code{virtual} and value calling conventions would
work, so perhaps we can disallow that use case, if the pass-by-value signatures
are kept in.

\subsection*{Teachability implications}

Using \code{auto\&\& this} follows existing patterns for dealing with forwarding
references.

Optionally adding "this" as the first parameter fits with many programmers'
mental model of the \code{this} pointer being the first parameter to member functions
"under the hood" and is comparable to usage in other languages, e.g. Python and
Rust.

It also works as a more obvious way to teach about how \code{std::bind} and
\code{std::function} with a method pointer work by making the pointer explicit.

\subsection*{ABI implications for \code{std::function} and related}

If references and pointers do not have the same representation for methods, this
effectively says "for the purposes of \code{this}, they do."

\section{Implications for lambdas}

Generic lambdas, should they take an \code{auto\&\& this} parameter, work
according to existing rewriting rules: the \code{auto\&\& this} is turned into a
"forwarding reference" and deduced as if it were inside a \code{template <typename T>
auto operator()(T\&\& this) \{ ...\ \}}.

\subsection*{Interplays with capturing \code{[this]} and \code{[*this]}}

As \code{this} is passed as an explicit parameter, it shadows members of the
closure. That said, it's not possible to refer to the members of the closure
using the \code{this} pointer of the lambda, since the closure has no defined
layout and the members referenced may not even be inserted into the closure, if
there even is one.

TBD: does init-capture obviate all need for \code{*this}?

\subsection*{Do we allow \code{this} in lambdas that decay to a function pointer?}

If the lambda would otherwise decay to a function pointer, \code{\&this} shall
have the value of that function pointer.

\subsection*{Does this allow recursion in lambdas?}

Yup. You're allowed to call \code{this(...)}.

\subsection*{Expressions allowed for \code{this} in lambdas:}

\begin{lstlisting}[language=cpp]
  this(...);      // call with appropriate signature
  decltype(this); // evaluates to the type of the lambda with the appropriate
                  // cv-ref qualifiers
  &this;          // the address of either the closure object or function pointer
  std::move(this) // you're allowed to move yourself into an algorithm...
  /* ... and all other things you're allowed to do with the lambda itself. */
\end{lstlisting}

TBD: I don't think we should say that you can now refer to the closure object.
What you can do is deduce the value category of the closure object, and access
its members in a way appropriate to it.

TBD: Do we believe this?

\section{Impact on the Standard}

TBD: A bunch of stuff in section 8.1.5 [expr.prim.lambda].

TBD: A bunch of stuff in that \code{this} can appear as the first method
parameter.

\section{Acknowledgments}

Thanks to the following for their help and guidance:

\begin{itemize}
  \item Louis Dionne
  \item Marshall Clow
\end{itemize}

\begin{thebibliography}{9}

\bibitem[P0839]{p0839}
Richard Smith,
\emph{Recursive lambdas}\newline
\url{http://wg21.link/p0839r0}

\bibitem[P0018r3]{p0018r3}
  \emph{Capturing \code{*this} by value}
  \url{http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0018r3.html}

\bibitem[P0637r0]{p0637r0}
  \emph{Capture \code{*this} With Initializer}
  \url{http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0637r0.html}

\end{thebibliography}


\appendix

\section{\code{forward\_like}}

We propose a new library facility, \code{forward\_like}, that acts as
\code{std::forward<T>(t).member} does for members, with the syntax
\code{forward\_like<T>(t.member)}. This is done because in the case of lambdas,
the closure members are not actually addressable using \code{this.member}.

The proposed semantics are essentially the same as \code{std::forward}.
If \code{From} and \code{To} are the same type, \code{forward\_like} and
\code{forward} act exacty the same.

Proposed definition:
\lstinputlisting[language=cpp,%
                 linerange=START_FWD_LIKE_DEF-END_FWD_LIKE_DEF]{%
                 forward_like.cpp}
%
To do that, we require another facility in the standard library, \code{like}:
\lstinputlisting[language=cpp,%
                 linerange=START_LIKE_DEF-END_LIKE_DEF]{%
                 forward_like.cpp}
It merely copies the cv-ref qualifiers from \code{From} to \code{To}.


The entire listing of the code with all the tests is available at
\url{https://github.com/atomgalaxy/isocpp-template-this/blob/master/forward_like.cpp}.
\end{document}
